# Generated by Django 5.1 on 2024-08-19 04:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import registration.formatChecker
import registration.models.model_registrations
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('hackkstate', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EthnicityOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=4)),
                ('value', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='MajorOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=4)),
                ('value', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time this record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The last time this record was updated.')),
                ('date_of_birth', models.DateField(help_text='MM-DD-YYYY', null=True, verbose_name='Date of Birth')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalRegistrations',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='The time this record was created.')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='The last time this record was updated.')),
                ('cardID', models.PositiveIntegerField(default=registration.models.model_registrations.get_next_card_id)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('dietary_restrictions', models.TextField(blank=True, default='', max_length=250, null=True, verbose_name='Do you have any dietary restrictions?')),
                ('phone_number', models.CharField(max_length=15)),
                ('is_minor', models.BooleanField(default=False, verbose_name='Under 18')),
                ('mlh_communication', models.BooleanField(default=False, verbose_name='MLH Communication')),
                ('participation', models.CharField(choices=[('N/A', 'Not Sure'), ('ONL', 'Online'), ('INP', 'In-person')], default='INP', max_length=4, verbose_name='How do you plan to participate in Hack K-State?')),
                ('shirt_size', models.CharField(choices=[('EXS', 'X-Small'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'X-Large'), ('XXL', 'XX-Large')], max_length=4, verbose_name='Shirt Size')),
                ('year_in_school', models.CharField(choices=[('HSFR', 'High School Freshman'), ('HSSO', 'High School Sophomore'), ('HSJR', 'High School Junior'), ('HSSR', 'High School Senior'), ('CFR', 'College Freshman'), ('CSO', 'College Sophomore'), ('CJR', 'College Junior'), ('CSR', 'College Senior'), ('COLD', 'College 5th year or greater'), ('NTRD', 'Nontraditional Student'), ('GRDS', 'Graduate Student'), ('VOCA', 'Other Vocational / Trade Program or Apprenticeship'), ('NO', 'I prefer not to answer')], max_length=4, verbose_name='Education Level')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('hackathon', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='hackkstate.hackathon')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical registrations',
                'verbose_name_plural': 'historical registrationss',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Registrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time this record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The last time this record was updated.')),
                ('cardID', models.PositiveIntegerField(default=registration.models.model_registrations.get_next_card_id)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('dietary_restrictions', models.TextField(blank=True, default='', max_length=250, null=True, verbose_name='Do you have any dietary restrictions?')),
                ('phone_number', models.CharField(max_length=15)),
                ('is_minor', models.BooleanField(default=False, verbose_name='Under 18')),
                ('mlh_communication', models.BooleanField(default=False, verbose_name='MLH Communication')),
                ('participation', models.CharField(choices=[('N/A', 'Not Sure'), ('ONL', 'Online'), ('INP', 'In-person')], default='INP', max_length=4, verbose_name='How do you plan to participate in Hack K-State?')),
                ('shirt_size', models.CharField(choices=[('EXS', 'X-Small'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'X-Large'), ('XXL', 'XX-Large')], max_length=4, verbose_name='Shirt Size')),
                ('year_in_school', models.CharField(choices=[('HSFR', 'High School Freshman'), ('HSSO', 'High School Sophomore'), ('HSJR', 'High School Junior'), ('HSSR', 'High School Senior'), ('CFR', 'College Freshman'), ('CSO', 'College Sophomore'), ('CJR', 'College Junior'), ('CSR', 'College Senior'), ('COLD', 'College 5th year or greater'), ('NTRD', 'Nontraditional Student'), ('GRDS', 'Graduate Student'), ('VOCA', 'Other Vocational / Trade Program or Apprenticeship'), ('NO', 'I prefer not to answer')], max_length=4, verbose_name='Education Level')),
                ('ethnicity', models.ManyToManyField(to='registration.ethnicityoption')),
                ('hackathon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hackkstate.hackathon')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time this record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The last time this record was updated.')),
                ('qWhy', models.TextField(default='', max_length=1000, verbose_name='Why do you want to participate in Hack K-State?')),
                ('qExpectations', models.TextField(default='', max_length=1000, verbose_name='What do you hope to get out of Hack K-State?')),
                ('qPrize', models.TextField(blank=True, default='', max_length=1000, null=True, verbose_name='Any cool prizes you would like to win? Share them here!')),
                ('resume', registration.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to='resume/')),
                ('school', models.CharField(default='', max_length=100)),
                ('major', models.ManyToManyField(to='registration.majoroption')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='registration.registrations')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time this record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The last time this record was updated.')),
                ('affiliation', models.CharField(max_length=255, verbose_name='Affiliation')),
                ('profession', models.CharField(max_length=255, verbose_name='Profession')),
                ('verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('registration_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='registration.registrations')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantCoach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The time this record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The last time this record was updated.')),
                ('verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coached_participants', to='registration.coach', verbose_name='Coach')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participant_coach', to=settings.AUTH_USER_MODEL, verbose_name='Participant')),
            ],
            options={
                'unique_together': {('participant', 'coach')},
            },
        ),
        migrations.AddConstraint(
            model_name='registrations',
            constraint=models.UniqueConstraint(fields=('user', 'hackathon'), name='cnst_unique_userHackathon'),
        ),
        migrations.AddConstraint(
            model_name='registrations',
            constraint=models.UniqueConstraint(fields=('hackathon', 'cardID'), name='cnst_unique_hackathonCard'),
        ),
    ]
